// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/announcements": {
            "get": {
                "description": "Get a paginated list of announcements. This endpoint is public.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Get announcements list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (starts from 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Announcement"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid page or limit parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create an announcement for authorized users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Create an announcement",
                "parameters": [
                    {
                        "description": "Announcement details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/announcements.AnnouncementsPostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Announcement successfully created"
                    },
                    "400": {
                        "description": "Invalid request payload"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/auth": {
            "post": {
                "description": "Auth user by username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Auth user",
                "parameters": [
                    {
                        "description": "User authorization details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully authorized"
                    },
                    "400": {
                        "description": "Invalid request payload or invalid username or invalid password"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/users": {
            "post": {
                "description": "Registers a new user with a username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/register.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered"
                    },
                    "400": {
                        "description": "Invalid request payload or user already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "announcements.AnnouncementsPostRequest": {
            "type": "object",
            "properties": {
                "article": {
                    "type": "string"
                },
                "cost": {
                    "type": "integer"
                },
                "imageURL": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "auth.AuthRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "12345"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "model.Announcement": {
            "type": "object",
            "properties": {
                "article": {
                    "type": "string"
                },
                "costRubles": {
                    "type": "integer"
                },
                "imageAddress": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "register.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "12345"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "VK Test Backend API",
	Description:      "This is a backend service for VK test task.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
