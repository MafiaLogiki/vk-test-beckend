{
    "swagger": "2.0",
    "info": {
        "description": "This is a backend service for VK test task.",
        "title": "VK Test Backend API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/announcements": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a paginated list of announcements. This endpoint is public.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Get announcements list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (starts from 1). Defaults to 1.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page. Defaults to 10.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "price_asc",
                            "price_desc",
                            "date_asc",
                            "date_desc"
                        ],
                        "type": "string",
                        "description": "Sort order for announcements.",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "All announcements with price more than min_price. Default is 0",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "All announcements with price less than max_price. Default is (1 \u003c\u003c 31) - 1",
                        "name": "max_price",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/announcements.AnnouncementsGetResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid page or limit parameter"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create an announcement for authorized users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Create an announcement",
                "parameters": [
                    {
                        "description": "Announcement details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/announcements.AnnouncementsPostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Announcement successfully created",
                        "schema": {
                            "$ref": "#/definitions/announcements.AnnouncementsPostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/auth": {
            "post": {
                "description": "Auth user by username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Auth user",
                "parameters": [
                    {
                        "description": "User authorization details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully authorized"
                    },
                    "400": {
                        "description": "Invalid request payload or invalid username or invalid password"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/users": {
            "post": {
                "description": "Registers a new user with a username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/register.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/register.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or user already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "announcements.AnnouncementsGetResponse": {
            "type": "object",
            "properties": {
                "image_url": {
                    "type": "string",
                    "example": "http://example.com/images/car"
                },
                "is_owner": {
                    "type": "boolean",
                    "example": false
                },
                "owner_username": {
                    "type": "string",
                    "example": "CoolUsername"
                },
                "price": {
                    "type": "integer",
                    "example": 700000
                },
                "text": {
                    "type": "string",
                    "example": "Продам машину, 120000км пробег"
                },
                "title": {
                    "type": "string",
                    "example": "Продам машину"
                }
            }
        },
        "announcements.AnnouncementsPostRequest": {
            "type": "object",
            "required": [
                "article",
                "cost",
                "text"
            ],
            "properties": {
                "article": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 5,
                    "example": "Продам старый диван"
                },
                "cost": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 5000
                },
                "image_url": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "http://example.com/images/sofa.jpg"
                },
                "text": {
                    "type": "string",
                    "maxLength": 2000,
                    "minLength": 10,
                    "example": "Продается диван б/у, в хорошем состоянии, самовывоз. Торг уместен."
                }
            }
        },
        "announcements.AnnouncementsPostResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-07-16T22:39:54.789179Z"
                },
                "id": {
                    "type": "integer",
                    "example": 11
                },
                "image_url": {
                    "type": "string",
                    "example": "http://example.com/images/car"
                },
                "price": {
                    "type": "integer",
                    "example": 700000
                },
                "text": {
                    "type": "string",
                    "example": "Продается машина, 120000км пробег"
                },
                "title": {
                    "type": "string",
                    "example": "Продам машину"
                },
                "user_id": {
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "auth.AuthRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "StrongP@ssw0rd!"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 1,
                    "example": "testUser123"
                }
            }
        },
        "register.RegisterRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "StrongP@ssw0rd!"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 1,
                    "example": "testUser123"
                }
            }
        },
        "register.RegisterResponse": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "CoolPassword"
                },
                "user_id": {
                    "type": "integer",
                    "example": 10
                },
                "username": {
                    "type": "string",
                    "example": "CoolUsername"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}